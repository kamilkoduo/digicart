// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kamilkoduo/digicart/src/service/db/api (interfaces: CartDBAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCartDBAPI is a mock of CartDBAPI interface
type MockCartDBAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCartDBAPIMockRecorder
}

// MockCartDBAPIMockRecorder is the mock recorder for MockCartDBAPI
type MockCartDBAPIMockRecorder struct {
	mock *MockCartDBAPI
}

// NewMockCartDBAPI creates a new mock instance
func NewMockCartDBAPI(ctrl *gomock.Controller) *MockCartDBAPI {
	mock := &MockCartDBAPI{ctrl: ctrl}
	mock.recorder = &MockCartDBAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCartDBAPI) EXPECT() *MockCartDBAPIMockRecorder {
	return m.recorder
}

// AddCartID mocks base method
func (m *MockCartDBAPI) AddCartID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCartID", arg0)
}

// AddCartID indicates an expected call of AddCartID
func (mr *MockCartDBAPIMockRecorder) AddCartID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCartID", reflect.TypeOf((*MockCartDBAPI)(nil).AddCartID), arg0)
}

// AddCartItemID mocks base method
func (m *MockCartDBAPI) AddCartItemID(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCartItemID", arg0, arg1)
}

// AddCartItemID indicates an expected call of AddCartItemID
func (mr *MockCartDBAPIMockRecorder) AddCartItemID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCartItemID", reflect.TypeOf((*MockCartDBAPI)(nil).AddCartItemID), arg0, arg1)
}

// AddCartItemInfo mocks base method
func (m *MockCartDBAPI) AddCartItemInfo(arg0, arg1 string, arg2 map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCartItemInfo", arg0, arg1, arg2)
}

// AddCartItemInfo indicates an expected call of AddCartItemInfo
func (mr *MockCartDBAPIMockRecorder) AddCartItemInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCartItemInfo", reflect.TypeOf((*MockCartDBAPI)(nil).AddCartItemInfo), arg0, arg1, arg2)
}

// AddCartItemOfferTitle mocks base method
func (m *MockCartDBAPI) AddCartItemOfferTitle(arg0, arg1 string, arg2 map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCartItemOfferTitle", arg0, arg1, arg2)
}

// AddCartItemOfferTitle indicates an expected call of AddCartItemOfferTitle
func (mr *MockCartDBAPIMockRecorder) AddCartItemOfferTitle(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCartItemOfferTitle", reflect.TypeOf((*MockCartDBAPI)(nil).AddCartItemOfferTitle), arg0, arg1, arg2)
}

// AddToMergedCartIDs mocks base method
func (m *MockCartDBAPI) AddToMergedCartIDs(arg0 string, arg1 ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddToMergedCartIDs", varargs...)
}

// AddToMergedCartIDs indicates an expected call of AddToMergedCartIDs
func (mr *MockCartDBAPIMockRecorder) AddToMergedCartIDs(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToMergedCartIDs", reflect.TypeOf((*MockCartDBAPI)(nil).AddToMergedCartIDs), varargs...)
}

// CartIDIsPresent mocks base method
func (m *MockCartDBAPI) CartIDIsPresent(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CartIDIsPresent", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CartIDIsPresent indicates an expected call of CartIDIsPresent
func (mr *MockCartDBAPIMockRecorder) CartIDIsPresent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CartIDIsPresent", reflect.TypeOf((*MockCartDBAPI)(nil).CartIDIsPresent), arg0)
}

// CartItemIDIsPresent mocks base method
func (m *MockCartDBAPI) CartItemIDIsPresent(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CartItemIDIsPresent", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CartItemIDIsPresent indicates an expected call of CartItemIDIsPresent
func (mr *MockCartDBAPIMockRecorder) CartItemIDIsPresent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CartItemIDIsPresent", reflect.TypeOf((*MockCartDBAPI)(nil).CartItemIDIsPresent), arg0, arg1)
}

// GetCartItemIDs mocks base method
func (m *MockCartDBAPI) GetCartItemIDs(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemIDs", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetCartItemIDs indicates an expected call of GetCartItemIDs
func (mr *MockCartDBAPIMockRecorder) GetCartItemIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemIDs", reflect.TypeOf((*MockCartDBAPI)(nil).GetCartItemIDs), arg0)
}

// GetCartItemInfo mocks base method
func (m *MockCartDBAPI) GetCartItemInfo(arg0, arg1 string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemInfo", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetCartItemInfo indicates an expected call of GetCartItemInfo
func (mr *MockCartDBAPIMockRecorder) GetCartItemInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemInfo", reflect.TypeOf((*MockCartDBAPI)(nil).GetCartItemInfo), arg0, arg1)
}

// GetCartItemOfferTitle mocks base method
func (m *MockCartDBAPI) GetCartItemOfferTitle(arg0, arg1 string) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemOfferTitle", arg0, arg1)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetCartItemOfferTitle indicates an expected call of GetCartItemOfferTitle
func (mr *MockCartDBAPIMockRecorder) GetCartItemOfferTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemOfferTitle", reflect.TypeOf((*MockCartDBAPI)(nil).GetCartItemOfferTitle), arg0, arg1)
}

// GetCartType mocks base method
func (m *MockCartDBAPI) GetCartType(arg0 string) byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartType", arg0)
	ret0, _ := ret[0].(byte)
	return ret0
}

// GetCartType indicates an expected call of GetCartType
func (mr *MockCartDBAPIMockRecorder) GetCartType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartType", reflect.TypeOf((*MockCartDBAPI)(nil).GetCartType), arg0)
}

// GetMergedCartIDs mocks base method
func (m *MockCartDBAPI) GetMergedCartIDs(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMergedCartIDs", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetMergedCartIDs indicates an expected call of GetMergedCartIDs
func (mr *MockCartDBAPIMockRecorder) GetMergedCartIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergedCartIDs", reflect.TypeOf((*MockCartDBAPI)(nil).GetMergedCartIDs), arg0)
}

// RemoveCartCompletely mocks base method
func (m *MockCartDBAPI) RemoveCartCompletely(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveCartCompletely", arg0)
}

// RemoveCartCompletely indicates an expected call of RemoveCartCompletely
func (mr *MockCartDBAPIMockRecorder) RemoveCartCompletely(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCartCompletely", reflect.TypeOf((*MockCartDBAPI)(nil).RemoveCartCompletely), arg0)
}

// RemoveCartItemID mocks base method
func (m *MockCartDBAPI) RemoveCartItemID(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveCartItemID", arg0, arg1)
}

// RemoveCartItemID indicates an expected call of RemoveCartItemID
func (mr *MockCartDBAPIMockRecorder) RemoveCartItemID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCartItemID", reflect.TypeOf((*MockCartDBAPI)(nil).RemoveCartItemID), arg0, arg1)
}

// RemoveCartItemInfo mocks base method
func (m *MockCartDBAPI) RemoveCartItemInfo(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveCartItemInfo", arg0, arg1)
}

// RemoveCartItemInfo indicates an expected call of RemoveCartItemInfo
func (mr *MockCartDBAPIMockRecorder) RemoveCartItemInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCartItemInfo", reflect.TypeOf((*MockCartDBAPI)(nil).RemoveCartItemInfo), arg0, arg1)
}

// RemoveCartItemOfferTitle mocks base method
func (m *MockCartDBAPI) RemoveCartItemOfferTitle(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveCartItemOfferTitle", arg0, arg1)
}

// RemoveCartItemOfferTitle indicates an expected call of RemoveCartItemOfferTitle
func (mr *MockCartDBAPIMockRecorder) RemoveCartItemOfferTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCartItemOfferTitle", reflect.TypeOf((*MockCartDBAPI)(nil).RemoveCartItemOfferTitle), arg0, arg1)
}

// SetCartType mocks base method
func (m *MockCartDBAPI) SetCartType(arg0 string, arg1 byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCartType", arg0, arg1)
}

// SetCartType indicates an expected call of SetCartType
func (mr *MockCartDBAPIMockRecorder) SetCartType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCartType", reflect.TypeOf((*MockCartDBAPI)(nil).SetCartType), arg0, arg1)
}
